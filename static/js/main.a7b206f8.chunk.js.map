{"version":3,"sources":["components/config/Fire.js","components/Home.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Home","props","logout","bind","auth","signOut","onClick","this","Component","Login","onSignIn","googleUser","console","log","unsubscribe","onAuthStateChanged","firebaseUser","isUserEqual","credential","GoogleAuthProvider","idToken","accessToken","signInAndRetrieveDataWithCredential","then","result","additionalUserInfo","isNewUser","database","ref","user","uid","set","gmail","email","profile_picture","profile","picture","first_name","given_name","last_name","family_name","created_at","Date","now","snapshot","update","last_logged_in","catch","error","login","handleChange","signup","state","password","e","setState","target","name","value","preventDefault","signInWithEmailAndPassword","u","createUserWithEmailAndPassword","className","id","class","for","onChange","type","aria-describedby","placeholder","style","marginLeft","App","authListener","localStorage","setItem","removeItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7b206f8.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAROMf-XVOoPXN_idZbYigkdn0eABbQbjA\",\r\n    authDomain: \"fp-annotatetheweb-class10.firebaseapp.com\",\r\n    databaseURL: \"https://fp-annotatetheweb-class10.firebaseio.com\",\r\n    projectId: \"fp-annotatetheweb-class10\",\r\n    storageBucket: \"fp-annotatetheweb-class10.appspot.com\",\r\n    messagingSenderId: \"845246565627\",\r\n    appId: \"1:845246565627:web:674b765f2b4d35ad95745e\",\r\n    measurementId: \"G-9XG7HLTHT1\"\r\n  };\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\nexport default fire;","import React, { Component } from 'react';\r\nimport fire from './config/Fire';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.logout = this.logout.bind(this);\r\n    }\r\n\r\n\r\n    logout() {\r\n        fire.auth().signOut();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Welcome to Home</h1>\r\n                <button onClick={this.logout}>Logout</button>\r\n            </div>                \r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\n//import { Link } from 'react-router-dom';\r\nimport fire from './config/Fire';\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.login = this.login.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.signup = this.signup.bind(this);\r\n    this.state = {\r\n      email: '',\r\n      password: ''\r\n    };\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  login(e) {\r\n    e.preventDefault();\r\n    fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\r\n      \r\n    }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  signup(e){\r\n    e.preventDefault();\r\n    fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\r\n    }).then((u)=>{console.log(u)})\r\n    .catch((error) => {\r\n        console.log(error);\r\n      })\r\n  }\r\n  onSignIn = googleUser => {\r\n    console.log('Google Auth Response', googleUser);\r\n    // We need to register an Observer on Firebase Auth to make sure auth is initialized.\r\n    const unsubscribe = fire.auth().onAuthStateChanged(\r\n      function(firebaseUser) {\r\n        unsubscribe();\r\n        // Check if we are already signed-in Firebase with the correct user.\r\n        if (!this.isUserEqual(googleUser, firebaseUser)) {\r\n          // Build Firebase credential with the Google ID token.\r\n          const credential = fire.auth.GoogleAuthProvider().credential(\r\n            googleUser.idToken,\r\n            googleUser.accessToken\r\n          );\r\n          // Sign in with credential from the Google user.\r\n          fire\r\n            .auth()\r\n            .signInAndRetrieveDataWithCredential(credential)\r\n            .then(function(result) {\r\n              console.log('user signed in ');\r\n              if (result.additionalUserInfo.isNewUser) {\r\n                fire\r\n                  .database()\r\n                  .ref('/users/' + result.user.uid)\r\n                  .set({\r\n                    gmail: result.user.email,\r\n                    profile_picture: result.additionalUserInfo.profile.picture,\r\n                    first_name: result.additionalUserInfo.profile.given_name,\r\n                    last_name: result.additionalUserInfo.profile.family_name,\r\n                    created_at: Date.now()\r\n                  })\r\n                  .then(function(snapshot) {\r\n                    // console.log('Snapshot', snapshot);\r\n                  });\r\n              } else {\r\n                fire\r\n                  .database()\r\n                  .ref('/users/' + result.user.uid)\r\n                  .update({\r\n                    last_logged_in: Date.now()\r\n                  });\r\n              }\r\n            })\r\n            .catch(function(error) {\r\n              // Handle Errors here.\r\n              /*var errorCode = error.code;\r\n              var errorMessage = error.message;\r\n              // The email of the user's account used.\r\n              var email = error.email;\r\n              // The fire.auth.AuthCredential type that was used.\r\n              var credential = error.credential;*/\r\n              // ...\r\n              console.log(error);\r\n            });\r\n        } else {\r\n          console.log('User already signed-in Firebase.');\r\n        }\r\n      }.bind(this)\r\n    );\r\n    /*var unsubscribe = fire.auth().onAuthStateChanged(\r\n      function(firebaseUser) {\r\n        unsubscribe();\r\n     const base_provider = new fire.auth.GoogleAuthProvider();\r\n     fire.auth().SignInWithRedirect(base_provider).then(result =>{\r\n        console.log(result);\r\n      }).catch(err =>{\r\n        console.log(err);\r\n      })\r\n      })*/\r\n      \r\n  };\r\n \r\n  render() {\r\n    return (\r\n        <div className=\"col-md-6\">\r\n            <form>\r\n                <div>\r\n                    <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"exampleInputEmail1\">Email address</label>\r\n                    <input value={this.state.email} onChange={this.handleChange} type=\"email\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" />\r\n                    \r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"exampleInputPassword1\">Password</label>\r\n                    <input value={this.state.password} onChange={this.handleChange} type=\"password\" name=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\" />\r\n                </div>\r\n                <button type=\"submit\" onClick={this.login} class=\"btn btn-primary\">Login</button>\r\n                <button onClick={this.signup} style={{marginLeft: '25px'}} className=\"btn btn-success\">Signup</button>\r\n                <button type=\"submit\" onClick={this.onSignIn} class=\"btn btn-primary\">Login with google</button>\r\n            </form>\r\n \r\n </div>\r\n    );\r\n  }\r\n}\r\nexport default Login;","import React, { Component } from 'react';\nimport './App.css';\nimport fire from './components/config/Fire';\nimport Home from './components/Home';\nimport Login from './components/Login';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = ({\n      user: null,\n    });\n    this.authListener = this.authListener.bind(this);\n  }\n\n  componentDidMount() {\n    this.authListener();\n  }\n\n  authListener() {\n    fire.auth().onAuthStateChanged((user) => {\n      console.log(user);\n      if (user) {\n        this.setState({ user });\n        localStorage.setItem('user', user.uid);\n      } else {\n        this.setState({ user: null });\n        localStorage.removeItem('user');\n      }\n    });\n  }\n  render() {\n    return (\n     <div>{this.state.user ?  ( <Home/>) : (<Login />)}</div>\n  )\n};\n}\n\n export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}