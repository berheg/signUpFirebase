{"version":3,"sources":["assets/images/imageLogin.jpg","components/Header/Header.Component.jsx","components/FormLoginRegister/FormLoginRegister.component.js","components/Button/Button.component.jsx","components/FormField/FormField.component.js","components/FormTitle/FormTitle.component.jsx","components/FormLine/FormLine.component.jsx","components/FormLogin/FormLogin.component.js","components/config/Fire.js","components/Home.js","firebase/configure.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","title","className","FormLoginRegister","formLoginRegister","text","register","classRegister","linewrapper","href","Button","props","buttons","onClick","click","icon","logo","align","FormField","box","inputType","textHolder","inputClass","changeHandler","type","placeholder","onChange","FormTitle","FormLine","FormLogin","faGoogle","this","onGoogleSignIn","faTwitter","onTwitterSignIn","faFacebookSquare","onFacebookSignIn","handleChange","class","login","Component","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","FacebookAuthProvider","GoogleAuthProvider","TwitterAuthProvider","Home","logout","bind","signOut","firebaseConfig","process","FIREBASE_API_KEY","FIREBASE_AUTH_DOMAIN","FIREBASE_DATABASE_URL","FIREBASE_PROJECT_ID","FIREBASE_STORAGE_BUCKET","FIREBASE_MESSAGING_SENDER_ID","FIREBASE_APP_ID","FIREBASE_MEASUREMENT_ID","apps","length","facebookProvider","googleProvider","twitterProvider","App","e","setState","target","value","isLoading","signInWithEmailAndPassword","state","email","password","then","u","catch","error","console","log","signup","createUserWithEmailAndPassword","googleUser","signInWithPopup","result","user","authListener","onAuthStateChanged","localStorage","setItem","uid","removeItem","src","imageLogin","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ed17fa8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imageLogin.5a34b187.jpg\";","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = ({ title }) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"logo\">{title}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './FormLoginRegister.css';\r\n\r\nconst FormLoginRegister = ({\r\n  formLoginRegister,\r\n  text,\r\n  register,\r\n  classRegister,\r\n  linewrapper,\r\n}) => {\r\n  return (\r\n    <div className={linewrapper}>\r\n      <div className={formLoginRegister}>\r\n        {text} <a href=\"\" className={classRegister}>{register}  </a>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\nexport default FormLoginRegister;\r\n","import React from 'react';\r\nimport './Button.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\nconst Button = ( props )  => {   \r\n     \r\n    return(\r\n            \r\n             <button className={props.buttons} onClick={props.click}>\r\n                <FontAwesomeIcon \r\n                 icon={props.logo} \r\n                 className={props.align} \r\n                 />{props.title}\r\n             </button>\r\n          )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport './FormField.css';\r\n\r\n\r\nconst FormField = ( {text, box, title, inputType, textHolder, inputClass, changeHandler} ) => {\r\n         \r\n         return(\r\n                    <label className={text}>\r\n                       <div className={box}>{title}</div>\r\n                        <input \r\n                          type={inputType}\r\n                          placeholder={textHolder}\r\n                          onChange={changeHandler}\r\n                          className={inputClass}/>\r\n                    </label>\r\n          \r\n              )\r\n     }\r\n    \r\n\r\nexport default FormField;","import React from 'react';\r\nimport './FormTitle.css';\r\n\r\nconst FormTitle = () => <div className='form-title'>Login to Annotate the web</div>\r\n\r\nexport default FormTitle;","import React from 'react';\r\nimport './FormLine.css';\r\n\r\nconst FormLine = () => <div className='form-line'>Or</div> \r\n    \r\nexport default FormLine;","import React, {Component} from 'react';\r\nimport './FormLogin.css';\r\nimport Button from '../Button/Button.component';\r\nimport FormField from '../FormField/FormField.component';\r\nimport FormTitle from '../FormTitle/FormTitle.component';\r\nimport FormLine from '../FormLine/FormLine.component';\r\nimport {faGoogle} from '@fortawesome/free-brands-svg-icons';\r\nimport {faFacebookSquare, faTwitter} from '@fortawesome/free-brands-svg-icons';\r\n\r\nclass FormLogin extends Component {\r\n  render () {\r\n    return (\r\n      <div className=\"login-wrapper\">\r\n        <div className=\"login-part\">\r\n          <FormTitle />\r\n          â€‹\r\n          <div className=\"social-media-button-wrapper\">\r\n            <Button\r\n              title=\"Log In With Google\"\r\n              buttons=\"google-btn\"\r\n              logo={faGoogle}\r\n              align=\"logo-align\"\r\n              click={this.props.onGoogleSignIn}\r\n            />\r\n            <Button\r\n              title=\"\"\r\n              buttons=\"twitter-btn\"\r\n              logo={faTwitter}\r\n              click={this.props.onTwitterSignIn}\r\n            />\r\n            <Button\r\n              title=\"\"\r\n              buttons=\"facebook-btn\"\r\n              logo={faFacebookSquare}\r\n              click={this.props.onFacebookSignIn}\r\n            />\r\n          </div>\r\n          <FormLine />\r\n          <FormField\r\n            title=\"Email Address\"\r\n            text=\"login-input-label\"\r\n            box=\"boxclass\"\r\n            inputType=\"email\"\r\n            //   textHolder=\"enter email here\"\r\n            inputClass=\"email-addres-box\"\r\n            changeHandler={this.props.handleChange}\r\n          />\r\n          <FormField\r\n            title=\"Password\"\r\n            text=\"login-input-label\"\r\n            box=\"boxclass\"\r\n            inputType=\"password\"\r\n            //   textHolder=\"enter password\"\r\n            inputClass=\"password-box\"\r\n            changeHandler={this.props.handleChange}\r\n          />\r\n          <div class=\"login-button-wrapper\">\r\n            <Button\r\n              title=\"Log In\"\r\n              buttons=\"submit-btn\"\r\n              click={this.props.login}\r\n              logo=\"\"\r\n            />\r\n          </div>\r\n          â€‹\r\n        </div>\r\n        â€‹\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default FormLogin;\r\n","import firebase from 'firebase';\r\n//import Rebase from 're-base';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAROMf-XVOoPXN_idZbYigkdn0eABbQbjA\",\r\n  authDomain: \"fp-annotatetheweb-class10.firebaseapp.com\",\r\n  databaseURL: \"https://fp-annotatetheweb-class10.firebaseio.com\",\r\n  projectId: \"fp-annotatetheweb-class10\",\r\n  storageBucket: \"fp-annotatetheweb-class10.appspot.com\",\r\n  messagingSenderId: \"845246565627\",\r\n  appId: \"1:845246565627:web:714afab19ea6670695745e\",\r\n  measurementId: \"G-R64ZFS2G88\"\r\n};\r\nexport const fire = firebase.initializeApp(firebaseConfig);\r\n//const base = Rebase.createClass(app.database());\r\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\nexport const twitterProvider = new firebase.auth.TwitterAuthProvider();\r\nexport default fire;","import React, { Component } from 'react';\r\nimport fire from './config/Fire';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.logout = this.logout.bind(this);\r\n    }\r\n\r\n\r\n    logout() {\r\n        fire.auth().signOut();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Welcome to Home</h1>\r\n                <button onClick={this.logout}>Logout</button>\r\n            </div>                \r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Home;","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport const firebaseConfig = {\r\n  apiKey: process.env.FIREBASE_API_KEY,\r\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\r\n  projectId: process.env.FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.FIREBASE_APP_ID,\r\n  measurementId: process.env.FIREBASE_MEASUREMENT_ID\r\n};\r\n\r\n\r\nlet app = null;\r\nif (!firebase.apps.length) {\r\n  app = firebase.initializeApp(firebaseConfig);\r\n}\r\n\r\n\r\nexport const auth = firebase.auth();\r\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\nexport const twitterProvider = new firebase.auth.TwitterAuthProvider();\r\nexport default app;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header.Component';\nimport FormLoginRegister from './components/FormLoginRegister/FormLoginRegister.component';\nimport imageLogin from './assets/images/imageLogin.jpg';\nimport FormLogin from './components/FormLogin/FormLogin.component';\nimport './components/FormLoginRegister/FormLoginRegister.css';\nimport Home from './components/Home';\n//import app from '../../firebase/configure';\nimport {auth, facebookProvider, googleProvider, twitterProvider} from './firebase/configure';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = ({\n      user: null,\n      email: '',\n      password: '',\n      isLoading: false\n    });\n    this.authListener = this.authListener.bind(this);\n  }\n\n  componentDidMount() {\n    this.authListener();\n  }\n\n  authListener() {\n    auth.onAuthStateChanged((user) => {\n      this.setState({isLoading: true});\n      console.log(user);\n      if (user) {\n        this.setState({ user });        \n        localStorage.setItem('user', user.uid);\n      } else {\n        this.setState({ user: null });\n        localStorage.removeItem('user');\n      }\n      this.setState({isLoading: false});\n    });\n  }\n  \n  handleChange =(e) => {\n    this.setState({ [e.target.type]: e.target.value });\n  }\n\n  login = (e) => {\n    this.setState({isLoading: true});\n    auth.signInWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\n      this.setState({isLoading: false});\n    }).catch((error) => {\n        console.log(error);\n      });\n  }\n  logout = () => {\n    auth.signOut();\n  }\n  signup = (e) => {\n    auth.createUserWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\n    }).then((u)=>{console.log(u)})\n    .catch((error) => {\n        console.log(error);\n      })\n  }\n  onGoogleSignIn = googleUser => {    \n      console.log(\"google authentication\");\n      auth.signInWithPopup(googleProvider)\n   .then((result, error) => {\n    if(error){\n      console.log(error)\n    }\n    else{\n\n    }\n   })\n  };\n onFacebookSignIn = () => {\n   auth.signInWithPopup(facebookProvider)\n   .then((result, error) => {\n    if(error){\n      console.log(error)\n    }\n    else{\n\n    }\n   })\n }\nonTwitterSignIn = () => {\n  auth.signInWithPopup(twitterProvider)\n   .then((result, error) => {\n    if(error){\n      console.log(error)\n    }\n    else{\n\n    }\n   })\n}\n  render () {\n    return (\n      <div className=\"main-wrapper-login-page\">\n        <div className=\"header-wrapper\">\n          <Header title=\"Annotate the web\" />\n          <FormLoginRegister\n            formLoginRegister=\"form-login-register\"\n            text=\"Do not have account yet?\"\n            register=\"Register\"\n            classRegister=\"register-class\"\n            linewrapper=\"register-right-up-corner\"\n          />\n        </div>\n        <div className=\"body-wrapper\">\n          <div className=\"image-wrapper\">\n            <img src={imageLogin} className=\"login-page-image\" alt=\"disc top computer and coup picture\"/>\n          </div>\n          {this.state.user?<Home />:<FormLogin\n            handleChange = {this.handleChange}\n            login = {this.login}\n            signup = {this.signup}\n            onGoogleSignIn = {this.onGoogleSignIn}\n            onFacebookSignIn = {this.onFacebookSignIn}\n            onTwitterSignIn = {this.onTwitterSignIn} \n          />}\n\n        </div>\n      </div>\n    );\n  }\n}\n\n export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}